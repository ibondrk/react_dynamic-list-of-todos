{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodoId","selectTodo","className","map","todo","id","title","completed","classNames","type","onClick","TodoFilter","completeStatus","setCompleteStatus","filterText","setFilterText","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","TodoModal","todoId","useState","modal","setModal","user","setUser","currentTodo","find","useEffect","userId","response","href","email","name","App","setTodos","isLoading","setIsLoading","setTodoId","query","setQuery","a","loadTodos","visibleTodos","useMemo","filter","compareTitle","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9af9fe39.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId: number | null;\n  selectTodo: (id: number | null) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  selectTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const { id, title, completed } = todo;\n          const handleSelectTodo = () => (selectedTodoId === id\n            ? selectTodo(null)\n            : selectTodo(id));\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed\n                  && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames({\n                    'has-text-success': completed,\n                    'has-text-danger': !completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={handleSelectTodo}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames({\n                      'far fa-eye-slash': (selectedTodoId === id),\n                      'far fa-eye': (selectedTodoId !== id),\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { FC } from 'react';\n\ntype Props = {\n  completeStatus: string;\n  setCompleteStatus: (status: string) => void;\n  filterText: string;\n  setFilterText: (text: string) => void;\n};\n\nexport const TodoFilter: FC<Props> = ({\n  completeStatus,\n  setCompleteStatus,\n  filterText,\n  setFilterText,\n}) => {\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => {\n        event.preventDefault();\n      }}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={completeStatus}\n            onChange={(event) => setCompleteStatus(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filterText}\n          onChange={(event) => setFilterText(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {filterText !== '' && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"Clear search query\"\n              onClick={() => setFilterText('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { FC, useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todoId: number;\n  todos: Todo[];\n  selectTodo: (id: number) => void;\n};\n\nexport const TodoModal: FC<Props> = ({\n  todoId,\n  todos,\n  selectTodo,\n}) => {\n  const [modal, setModal] = useState<boolean>(true);\n  const [user, setUser] = useState<User | null>(null);\n  const currentTodo = todos.find(({ id }) => id === todoId);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then((response) => {\n          setUser(response);\n        });\n    }\n  }, []);\n\n  if (!modal) {\n    return null;\n  }\n\n  const handleDeletingTodo = () => {\n    setModal(false);\n    selectTodo(0);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todoId}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleDeletingTodo}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo?.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import {\n  FC,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [todoId, setTodoId] = useState<number | null>(null);\n  const [completeStatus, setCompleteStatus] = useState('all');\n  const [query, setQuery] = useState('');\n\n  async function loadTodos() {\n    setIsLoading(true);\n\n    try {\n      const response = await getTodos();\n\n      setTodos(response);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const visibleTodos = useMemo(() => (todos.filter(todo => {\n    const compareTitle = todo.title.toLowerCase()\n      .includes(query.toLowerCase());\n\n    switch (completeStatus) {\n      case 'active':\n        return !todo.completed && compareTitle;\n      case 'completed':\n        return todo.completed && compareTitle;\n      default:\n        return compareTitle;\n    }\n  })), [todos, completeStatus, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                completeStatus={completeStatus}\n                setCompleteStatus={setCompleteStatus}\n                filterText={query}\n                setFilterText={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (<Loader />)\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodoId={todoId}\n                    selectTodo={setTodoId}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todoId && (\n        <TodoModal\n          todos={visibleTodos}\n          todoId={todoId}\n          selectTodo={setTodoId}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}